launch :anycable,
  "./dist/anycable-go --pusher_app_id=my-test-id --pusher_app_key=ballard --public_streams --pusher_secret=oaugc1"

wait_tcp 8080

require "json"
require "openssl"

def pusher_signature(app_key, secret, str)
  digest = OpenSSL::Digest::SHA256.new
  signature = OpenSSL::HMAC.hexdigest(digest, secret, str)
  "#{app_key}:#{signature}"
end

scenario = [
  {
    client: {
      name: "publisher",
      connection_options: {
        headers: {
          "x-request-id" => "2025.1234"
        }
      },
      actions: [
        {
          receive: {
            "data>" => {
              event: "pusher:connection_established"
            }
          }
        },
        {
          send: {
            data: {
              event: "pusher:subscribe",
              data: {
                channel: "private-test",
                auth: pusher_signature("ballard", "oaugc1", "2025.1234:private-test")
              }
            }
          }
        },
        {
          receive: {
            "data>" => {
              event: "pusher_internal:subscription_succeeded"
            }
          }
        },
        {
          wait_all: {}
        },
        {
          send: {
            data: {
              event: "client-forgotten",
              channel: "private-test",
              data: {
                body: "funeral_without_applause"
              }
            }
          }
        }
      ]
    }
  },
  {
    client: {
      name: "subscriber",
      connection_options: {
        headers: {
          "x-request-id" => "2025.4343"
        }
      },
      actions: [
        {
          receive: {
            "data>" => {
              event: "pusher:connection_established"
            }
          }
        },
        {
          send: {
            data: {
              event: "pusher:subscribe",
              data: {
                channel: "private-test",
                auth: pusher_signature("ballard", "oaugc1", "2025.4343:private-test")
              }
            }
          }
        },
        {
          receive: {
            "data>" => {
              event: "pusher_internal:subscription_succeeded"
            }
          }
        },
        {
          wait_all: {}
        },
        {
          receive: {
            data: {
              event: "client-forgotten",
              channel: "private-test",
              data: {
                body: "funeral_without_applause"
              }
            }
          }
        }
      ]
    }
  }
]

TEST_COMMAND = <<~CMD
  bundle exec wsdirector ws://localhost:8080/app/ballard -i #{scenario.to_json}
CMD

run :wsdirector, TEST_COMMAND

result = stdout(:wsdirector)

unless result.include?("Group publisher: 1 clients, 0 failures") &&
  result.include?("Group subscriber: 1 clients, 0 failures")
  fail "Unexpected scenario result:\n#{result}"
end
