launch :anycable,
  "./dist/anycable-go --secret=s3Krit --norpc"

wait_tcp 8080

payload = {ext: {}.to_json, exp: (Time.now.to_i + 60)}

token = ::JWT.encode(payload, "s3Krit", "HS256")

verifier = ActiveSupport::MessageVerifier.new("s3Krit", digest: "SHA256", serializer: JSON)
signed_stream_name = verifier.generate("chat/2023")

# Authenticated client + subscription
scenario = [
  {
    client: {
      protocol: "action_cable",
      name: "turbo",
      connection_options: {
        query: {
          jid: token
        }
      },
      actions: [
        {
          subscribe: {
            channel: "$pubsub",
            params: {
              signed_stream_name: signed_stream_name
            }
          }
        },
      ]
    }
  }
]

TEST_COMMAND = <<~CMD
  bundle exec wsdirector ws://localhost:8080/cable -i #{scenario.to_json}
CMD

run :wsdirector, TEST_COMMAND

result = stdout(:wsdirector)

unless result.include?("1 clients, 0 failures")
  fail "Unexpected scenario result:\n#{result}"
end

# Unauthenticated client
scenario = [
  {
    receive: {
      data: {
        type: "disconnect",
        reason: "unauthorized",
        reconnect: false
      }
    }
  }
]

TEST_COMMAND = <<~CMD
  bundle exec wsdirector ws://localhost:8080/cable -i #{scenario.to_json}
CMD

run :wsdirector, TEST_COMMAND

result = stdout(:wsdirector)

unless result.include?("1 clients, 0 failures")
  fail "Unexpected scenario result:\n#{result}"
end
