launch :rpc, "bundle exec anyt --only-rpc",
 env: {"ANYCABLE_BROADCAST_ADAPTER" => "nats", "ANYCABLE_NATS_SERVERS" => "nats://localhost:4242"}
wait_tcp 50051

launch :anycable_1,
  "./dist/anycable-go --broadcast_adapter=nats --embed_nats --enats_addr=nats://localhost:4242 --enats_cluster=nats://localhost:4342 --enats_gateway=nats://localhost:4442"
wait_tcp 8080
wait_tcp 4342

launch :anycable_2,
  "./dist/anycable-go --port 8081 --broadcast_adapter=nats --embed_nats --enats_addr=nats://localhost:4243 --enats_cluster=nats://localhost:4343 --enats_cluster_routes=nats://localhost:4342"
wait_tcp 8081

launch :anycable_3,
  "./dist/anycable-go --port 8082 --broadcast_adapter=nats --embed_nats --enats_addr=nats://localhost:4244 --enats_cluster=nats://localhost:4344 --enats_cluster_name=another-cluster --enats_gateway=nats://localhost:4444 --enats_gateways=anycable-cluster:nats://localhost:4442"
wait_tcp 8082

# We need to wait a bit for the NATS servers to find each other
sleep 2

scenario = [
  {
    client: {
      protocol: "action_cable",
      name: "publisher",
      actions: [
        {
          subscribe: {
            channel: "BenchmarkChannel"
          }
        },
        {
          perform: {
            channel: "BenchmarkChannel",
            action: "broadcast",
            data: {
              message: "hello"
            }
          }
        },
        {
          receive: {
            channel: "BenchmarkChannel",
            data: {
              message: "hello",
              action: "broadcast"
            }
          }
        },
        {
          receive: {
            channel: "BenchmarkChannel",
            data: {
              message: "hello",
              action: "broadcastResult"
            }
          }
        }
      ]
    }
  },
  {
    client: {
      protocol: "action_cable",
      name: "subscriber",
      connection_options: {
        url: "http://localhost:8081/cable"
      },
      actions: [
        {
          subscribe: {
            channel: "BenchmarkChannel"
          }
        },
        {
          receive: {
            channel: "BenchmarkChannel",
            data: {
              message: "hello",
              action: "broadcast"
            }
          }
        }
      ]
    }
  },
  {
    client: {
      protocol: "action_cable",
      name: "another_subscriber",
      connection_options: {
        url: "http://localhost:8082/cable"
      },
      actions: [
        {
          subscribe: {
            channel: "BenchmarkChannel"
          }
        },
        {
          receive: {
            channel: "BenchmarkChannel",
            data: {
              message: "hello",
              action: "broadcast"
            }
          }
        }
      ]
    }
  }
]

TEST_COMMAND = <<~CMD
  bundle exec wsdirector ws://localhost:8080/cable -i #{scenario.to_json}
CMD

run :wsdirector, TEST_COMMAND

result = stdout(:wsdirector)

unless result.include?("Group publisher: 1 clients, 0 failures") &&
  result.include?("Group subscriber: 1 clients, 0 failures") &&
  result.include?("Group another_subscriber: 1 clients, 0 failures")
  fail "Unexpected scenario result:\n#{result}"
end
