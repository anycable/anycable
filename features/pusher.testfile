launch :anycable,
  "./dist/anycable-go --pusher_app_id=my-test-id --public_streams --pusher_secret=oaugc1 --pusher_app_key=detox"

wait_tcp 8080

scenario = [
  {
    receive: {
      "data>" => {
        event: "pusher:connection_established"
      }
    }
  },
  {
    send: {
      data: {
        event: "pusher:subscribe",
        data: {
          channel: "test-pusher-channel",
          auth: ""
        }
      }
    }
  },
  {
    receive: {
      "data>" => {
        event: "pusher_internal:subscription_succeeded"
      }
    }
  },
  {
    receive: {
      "data>" => {
        event: "test-event",
        channel: "test-pusher-channel"
      }
    }
  }
]

TEST_COMMAND = <<~CMD
  bundle exec wsdirector ws://localhost:8080/app/detox -i #{scenario.to_json}
CMD

q = Queue.new
Thread.new do
  run :wsdirector, TEST_COMMAND
  q.push(nil)
end

# Wait a bit to ensure connection and subscription
sleep 3

# https://pusher.com/docs/channels/library_auth_reference/rest-api/#worked-authentication-example
def pusher_broadcast(channel, event, data, app_id = "my-test-id", key = "detox", secret = "oaugc1", url: "http://localhost:8080/")
  require "digest/md5"
  require "openssl"

  body = {name: event, channels: [channel], data: data.to_json}.to_json
  auth_timestamp = Time.now.to_i.to_s
  auth_version = "1.0"

  body_md5 = Digest::MD5.hexdigest(body)

  auth_params = "auth_key=" + key +
    "&auth_timestamp=" + auth_timestamp +
    "&auth_version=" + auth_version +
    "&body_md5=" + body_md5

  string_to_sign = "POST\n/apps/" + app_id + "/events\n" + auth_params

  digest = OpenSSL::Digest::SHA256.new
  auth_signature = OpenSSL::HMAC.hexdigest(digest, secret, string_to_sign)

  uri = URI.parse(url + "apps/" + app_id + "/events?#{auth_params}&auth_signature=#{auth_signature}")
  headers = {
    "Content-Type": "application/json"
  }

  http = Net::HTTP.new(uri.host, uri.port)
  request = Net::HTTP::Post.new(uri.request_uri, headers)
  request.body = body
  response = http.request(request)

  if response.code != "200"
    fail "Pusher broadcast returned unexpected status: #{response.code}"
  end
end

pusher_broadcast("test-pusher-channel", "test-event", {"message":"Hello from Pusha"})

q.pop

result = stdout(:wsdirector)

unless result.include?("1 clients, 0 failures")
  fail "Unexpected scenario result:\n#{result}"
end
