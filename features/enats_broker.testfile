launch :rpc, "bundle exec anyt --only-rpc",
 env: {"ANYCABLE_BROADCAST_ADAPTER" => "http"}
wait_tcp 50051

store_path = File.expand_path("../tmp/nats-data", __dir__)
FileUtils.rm_rf(store_path) if File.directory?(store_path)

launch :anycable_1,
  "./dist/anycable-go --port 8080 --broker=nats --pubsub=nats --broadcast_adapter=http --embed_nats --enats_addr=nats://localhost:4242 --enats_cluster=nats://localhost:4342 --enats_gateway=nats://localhost:4442 --enats_cluster_routes=nats://localhost:4342 --enats_store_dir=#{store_path}/one"

sleep 1

launch :anycable_2,
  "./dist/anycable-go --port 8081 --broker=nats --pubsub=nats --broadcast_adapter=nats --embed_nats --enats_addr=nats://localhost:4243 --enats_cluster=nats://localhost:4343 --enats_cluster_routes=nats://localhost:4342 --enats_store_dir=#{store_path}/two"

sleep 1

launch :anycable_3,
  "./dist/anycable-go --port 8082 --broker=nats --pubsub=nats --broadcast_adapter=nats --embed_nats --enats_addr=nats://localhost:4244 --enats_cluster=nats://localhost:4344 --enats_cluster_routes=nats://localhost:4342 --enats_store_dir=#{store_path}/three"

wait_tcp 8080
wait_tcp 8081
wait_tcp 8082

# Wait for JetStream to be ready; we can do this by checking that the epoch data has been written on disk
timeout = 20
log(:info) { "Waiting for JetStream to be ready" }
loop do
  break if Dir["#{store_path}/**/*"].any? { |f| f =~ /KV__anycable_epoch_/ }

  Kernel.sleep 0.5
  timeout -= 0.5

  if timeout < 0
    fail "JetStream is not ready"
  end
end

# Let's wait for epoch to be propagated to all nodes
sleep 2

# We need to obtain epoch first
epoch_scenario = [
  {
    client: {
      protocol: "action_cable",
      actions: [
        {
          subscribe: {
            channel: "BenchmarkChannel"
          }
        },
        {
          perform: {
            channel: "BenchmarkChannel",
            action: "broadcast",
            data: {
              message: "hello"
            }
          }
        },
        {
          receive: {
            channel: "BenchmarkChannel",
            "data>": {
              message: "hello",
              action: "broadcast",
            },
            stream_id: "all",
            print: true
          }
        }
      ]
    }
  }
]

result = nil

retrying(delay: 2) do
  run :wsdirector, "bundle exec wsdirector ws://localhost:8080/cable -i #{epoch_scenario.to_json}"

  result = stdout(:wsdirector)

  if result !~ /1 clients, 0 failures/
    fail "Unexpected scenario result:\n#{result}"
  end
end

epoch = result.match(/"epoch":"([^"]+)"/)[1]

if epoch.nil? || epoch.empty?
  fail "Epoch is missing"
end

scenario = [
  {
    client: {
      protocol: "action_cable",
      name: "publisher",
      actions: [
        {
          subscribe: {
            channel: "BenchmarkChannel"
          }
        },
        "wait_all",
        {
          perform: {
            channel: "BenchmarkChannel",
            action: "broadcast",
            data: {
              message: "hello"
            }
          }
        },
        {
          receive: {
            channel: "BenchmarkChannel",
            "data>": {
              message: "hello",
              action: "broadcast",
            },
            stream_id: "all",
            epoch: epoch
          }
        },
        {
          receive: {
            channel: "BenchmarkChannel",
            data: {
              message: "hello",
              action: "broadcastResult"
            }
          }
        }
      ]
    }
  },
  {
    client: {
      protocol: "action_cable",
      name: "subscriber",
      multiplier: ":scale",
      connection_options: {
        url: "http://localhost:8081/cable"
      },
      actions: [
        {
          subscribe: {
            channel: "BenchmarkChannel"
          }
        },
        "wait_all",
        {
          receive: {
            channel: "BenchmarkChannel",
            "data>": {
              message: "hello",
              action: "broadcast"
            },
            stream_id: "all",
            epoch: epoch
          }
        }
      ]
    }
  },
  {
    client: {
      protocol: "action_cable",
      name: "another_subscriber",
      multiplier: ":scale",
      connection_options: {
        url: "http://localhost:8082/cable"
      },
      actions: [
        {
          subscribe: {
            channel: "BenchmarkChannel"
          }
        },
        "wait_all",
        {
          receive: {
            channel: "BenchmarkChannel",
            "data>": {
              message: "hello",
              action: "broadcast"
            },
            stream_id: "all",
            epoch: epoch
          }
        }
      ]
    }
  }
]

TEST_COMMAND = <<~CMD
  bundle exec wsdirector ws://localhost:8080/cable -i #{scenario.to_json} -s 4
CMD

retrying(delay: 2) do
  run :wsdirector, TEST_COMMAND

  result = stdout(:wsdirector)

  unless result.include?("Group publisher: 1 clients, 0 failures") &&
    result.include?("Group subscriber: 4 clients, 0 failures") &&
    result.include?("Group another_subscriber: 4 clients, 0 failures")
    fail "Unexpected scenario result:\n#{result}"
  end
end
