// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"

	common "github.com/anycable/anycable-go/common"

	mock "github.com/stretchr/testify/mock"
)

// Controller is an autogenerated mock type for the Controller type
type Controller struct {
	mock.Mock
}

// Authenticate provides a mock function with given fields: ctx, sid, env
func (_m *Controller) Authenticate(ctx context.Context, sid string, env *common.SessionEnv) (*common.ConnectResult, error) {
	ret := _m.Called(ctx, sid, env)

	if len(ret) == 0 {
		panic("no return value specified for Authenticate")
	}

	var r0 *common.ConnectResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *common.SessionEnv) (*common.ConnectResult, error)); ok {
		return rf(ctx, sid, env)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *common.SessionEnv) *common.ConnectResult); ok {
		r0 = rf(ctx, sid, env)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.ConnectResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *common.SessionEnv) error); ok {
		r1 = rf(ctx, sid, env)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Disconnect provides a mock function with given fields: ctx, sid, env, ids, subscriptions
func (_m *Controller) Disconnect(ctx context.Context, sid string, env *common.SessionEnv, ids string, subscriptions []string) error {
	ret := _m.Called(ctx, sid, env, ids, subscriptions)

	if len(ret) == 0 {
		panic("no return value specified for Disconnect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *common.SessionEnv, string, []string) error); ok {
		r0 = rf(ctx, sid, env, ids, subscriptions)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Perform provides a mock function with given fields: ctx, sid, env, ids, channel, data
func (_m *Controller) Perform(ctx context.Context, sid string, env *common.SessionEnv, ids string, channel string, data string) (*common.CommandResult, error) {
	ret := _m.Called(ctx, sid, env, ids, channel, data)

	if len(ret) == 0 {
		panic("no return value specified for Perform")
	}

	var r0 *common.CommandResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *common.SessionEnv, string, string, string) (*common.CommandResult, error)); ok {
		return rf(ctx, sid, env, ids, channel, data)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *common.SessionEnv, string, string, string) *common.CommandResult); ok {
		r0 = rf(ctx, sid, env, ids, channel, data)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.CommandResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *common.SessionEnv, string, string, string) error); ok {
		r1 = rf(ctx, sid, env, ids, channel, data)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Shutdown provides a mock function with no fields
func (_m *Controller) Shutdown() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Shutdown")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Start provides a mock function with no fields
func (_m *Controller) Start() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Subscribe provides a mock function with given fields: ctx, sid, env, ids, channel
func (_m *Controller) Subscribe(ctx context.Context, sid string, env *common.SessionEnv, ids string, channel string) (*common.CommandResult, error) {
	ret := _m.Called(ctx, sid, env, ids, channel)

	if len(ret) == 0 {
		panic("no return value specified for Subscribe")
	}

	var r0 *common.CommandResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *common.SessionEnv, string, string) (*common.CommandResult, error)); ok {
		return rf(ctx, sid, env, ids, channel)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *common.SessionEnv, string, string) *common.CommandResult); ok {
		r0 = rf(ctx, sid, env, ids, channel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.CommandResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *common.SessionEnv, string, string) error); ok {
		r1 = rf(ctx, sid, env, ids, channel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Unsubscribe provides a mock function with given fields: ctx, sid, env, ids, channel
func (_m *Controller) Unsubscribe(ctx context.Context, sid string, env *common.SessionEnv, ids string, channel string) (*common.CommandResult, error) {
	ret := _m.Called(ctx, sid, env, ids, channel)

	if len(ret) == 0 {
		panic("no return value specified for Unsubscribe")
	}

	var r0 *common.CommandResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, *common.SessionEnv, string, string) (*common.CommandResult, error)); ok {
		return rf(ctx, sid, env, ids, channel)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, *common.SessionEnv, string, string) *common.CommandResult); ok {
		r0 = rf(ctx, sid, env, ids, channel)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*common.CommandResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, *common.SessionEnv, string, string) error); ok {
		r1 = rf(ctx, sid, env, ids, channel)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewController creates a new instance of Controller. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewController(t interface {
	mock.TestingT
	Cleanup(func())
}) *Controller {
	mock := &Controller{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
