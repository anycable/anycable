// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import anycable "github.com/anycable/anycable-go/protos"
import context "context"
import mock "github.com/stretchr/testify/mock"

// RPCServer is an autogenerated mock type for the RPCServer type
type RPCServer struct {
	mock.Mock
}

// Command provides a mock function with given fields: _a0, _a1
func (_m *RPCServer) Command(_a0 context.Context, _a1 *anycable.CommandMessage) (*anycable.CommandResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *anycable.CommandResponse
	if rf, ok := ret.Get(0).(func(context.Context, *anycable.CommandMessage) *anycable.CommandResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*anycable.CommandResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *anycable.CommandMessage) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Connect provides a mock function with given fields: _a0, _a1
func (_m *RPCServer) Connect(_a0 context.Context, _a1 *anycable.ConnectionRequest) (*anycable.ConnectionResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *anycable.ConnectionResponse
	if rf, ok := ret.Get(0).(func(context.Context, *anycable.ConnectionRequest) *anycable.ConnectionResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*anycable.ConnectionResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *anycable.ConnectionRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Disconnect provides a mock function with given fields: _a0, _a1
func (_m *RPCServer) Disconnect(_a0 context.Context, _a1 *anycable.DisconnectRequest) (*anycable.DisconnectResponse, error) {
	ret := _m.Called(_a0, _a1)

	var r0 *anycable.DisconnectResponse
	if rf, ok := ret.Get(0).(func(context.Context, *anycable.DisconnectRequest) *anycable.DisconnectResponse); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*anycable.DisconnectResponse)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, *anycable.DisconnectRequest) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
