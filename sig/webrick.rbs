module WEBrick
  CR: String

  CRLF: String

  LF: String

  VERSION: String

  module AccessLog
    def self.escape: (untyped data) -> untyped

    def self.format: (untyped format_string, untyped params) -> untyped

    def self.setup_params: (untyped config, untyped req, untyped res) -> untyped

    private

    def escape: (untyped data) -> untyped

    def format: (untyped format_string, untyped params) -> untyped

    def setup_params: (untyped config, untyped req, untyped res) -> untyped

    AGENT_LOG_FORMAT: String

    CLF: String

    CLF_TIME_FORMAT: String

    COMBINED_LOG_FORMAT: String

    COMMON_LOG_FORMAT: String

    REFERER_LOG_FORMAT: String

    class AccessLogError < StandardError
    end
  end

  class BasicLog
    public

    def <<: (untyped obj) -> untyped

    def close: () -> untyped

    def debug: (untyped msg) -> untyped

    def debug?: () -> untyped

    def error: (untyped msg) -> untyped

    def error?: () -> untyped

    def fatal: (untyped msg) -> untyped

    def fatal?: () -> untyped

    def info: (untyped msg) -> untyped

    def info?: () -> untyped

    def level: () -> untyped

    def level=: (untyped) -> untyped

    def log: (untyped level, untyped data) -> untyped

    def warn: (untyped msg) -> untyped

    def warn?: () -> untyped

    private

    def format: (untyped arg) -> untyped

    def initialize: (?untyped log_file, ?untyped level) -> void

    DEBUG: Integer

    ERROR: Integer

    FATAL: Integer

    INFO: Integer

    WARN: Integer
  end

  module Config
    BasicAuth: Hash[untyped, untyped]

    DigestAuth: Hash[untyped, untyped]

    FileHandler: Hash[untyped, untyped]

    General: Hash[untyped, untyped]

    HTTP: Hash[untyped, untyped]

    LIBDIR: String
  end

  class Cookie
    def self.parse: (untyped str) -> untyped

    def self.parse_set_cookie: (untyped str) -> untyped

    def self.parse_set_cookies: (untyped str) -> untyped

    public

    def comment: () -> untyped

    def comment=: (untyped) -> untyped

    def domain: () -> untyped

    def domain=: (untyped) -> untyped

    def expires: () -> untyped

    def expires=: (untyped t) -> untyped

    def max_age: () -> untyped

    def max_age=: (untyped) -> untyped

    def name: () -> untyped

    def path: () -> untyped

    def path=: (untyped) -> untyped

    def secure: () -> untyped

    def secure=: (untyped) -> untyped

    def to_s: () -> untyped

    def value: () -> untyped

    def value=: (untyped) -> untyped

    def version: () -> untyped

    def version=: (untyped) -> untyped

    private

    def initialize: (untyped name, untyped value) -> void
  end

  class Daemon
    def self.start: () ?{ () -> untyped } -> untyped
  end

  class GenericServer
    public

    def []: (untyped key) -> untyped

    def config: () -> untyped

    def listen: (untyped address, untyped port) -> untyped

    def listeners: () -> untyped

    def logger: () -> untyped

    def run: (untyped sock) -> untyped

    def shutdown: () -> untyped

    def start: () { (*untyped) -> untyped } -> untyped

    def status: () -> untyped

    def stop: () -> untyped

    def tokens: () -> untyped

    private

    def accept_client: (untyped svr) -> untyped

    def alarm_shutdown_pipe: () { (untyped) -> untyped } -> untyped

    def call_callback: (untyped callback_name, *untyped args) -> untyped

    def cleanup_listener: () -> untyped

    def cleanup_shutdown_pipe: (untyped shutdown_pipe) -> untyped

    def initialize: (?untyped config, ?untyped default) -> void

    def setup_shutdown_pipe: () -> untyped

    def start_thread: (untyped sock) { (*untyped) -> untyped } -> untyped
  end

  module HTMLUtils
    def self.escape: (untyped string) -> untyped

    private

    def escape: (untyped string) -> untyped
  end

  module HTTPAuth
    def self._basic_auth: (untyped req, untyped res, untyped realm, untyped req_field, untyped res_field, untyped err_type, untyped block) -> untyped

    def self.basic_auth: (untyped req, untyped res, untyped realm) { (*untyped) -> untyped } -> untyped

    def self.proxy_basic_auth: (untyped req, untyped res, untyped realm) { (*untyped) -> untyped } -> untyped

    private

    def _basic_auth: (untyped req, untyped res, untyped realm, untyped req_field, untyped res_field, untyped err_type, untyped block) -> untyped

    def basic_auth: (untyped req, untyped res, untyped realm) { (*untyped) -> untyped } -> untyped

    def proxy_basic_auth: (untyped req, untyped res, untyped realm) { (*untyped) -> untyped } -> untyped

    module Authenticator
      public

      def logger: () -> untyped

      def realm: () -> untyped

      def userdb: () -> untyped

      private

      def check_init: (untyped config) -> untyped

      def check_scheme: (untyped req) -> untyped

      def error: (untyped fmt, *untyped args) -> untyped

      def info: (untyped fmt, *untyped args) -> untyped

      def log: (untyped meth, untyped fmt, *untyped args) -> untyped

      AuthScheme: untyped?

      RequestField: String

      ResponseField: String

      ResponseInfoField: String
    end

    class BasicAuth
      include WEBrick::HTTPAuth::Authenticator

      def self.make_passwd: (untyped realm, untyped user, untyped pass) -> untyped

      public

      def authenticate: (untyped req, untyped res) -> untyped

      def challenge: (untyped req, untyped res) -> untyped

      def logger: () -> untyped

      def realm: () -> untyped

      def userdb: () -> untyped

      private

      def initialize: (untyped config, ?untyped default) -> void

      AuthScheme: String
    end

    class DigestAuth
      include WEBrick::HTTPAuth::Authenticator

      def self.make_passwd: (untyped realm, untyped user, untyped pass) -> untyped

      public

      def algorithm: () -> untyped

      def authenticate: (untyped req, untyped res) -> untyped

      def challenge: (untyped req, untyped res, ?untyped stale) -> untyped

      def qop: () -> untyped

      private

      def _authenticate: (untyped req, untyped res) -> untyped

      def check_nonce: (untyped req, untyped auth_req) -> untyped

      def check_opaque: (untyped opaque_struct, untyped req, untyped auth_req) -> untyped

      def check_uri: (untyped req, untyped auth_req) -> untyped

      def generate_next_nonce: (untyped req) -> untyped

      def generate_opaque: (untyped req) -> untyped

      def hexdigest: (*untyped args) -> untyped

      def initialize: (untyped config, ?untyped default) -> void

      def split_param_value: (untyped string) -> untyped

      AuthScheme: String

      MustParams: Array[untyped]

      MustParamsAuth: Array[untyped]

      class OpaqueInfo < Struct[untyped]
        def self.[]: (*untyped) -> untyped

        def self.inspect: () -> untyped

        def self.keyword_init?: () -> untyped

        def self.members: () -> untyped

        def self.new: (*untyped) -> untyped

        public

        def nc: () -> untyped

        def nc=: (untyped _) -> untyped

        def nonce: () -> untyped

        def nonce=: (untyped _) -> untyped

        def time: () -> untyped

        def time=: (untyped _) -> untyped
      end
    end

    class Htdigest
      include WEBrick::HTTPAuth::UserDB

      public

      def delete_passwd: (untyped realm, untyped user) -> untyped

      def each: () { (untyped) -> untyped } -> untyped

      def flush: (?untyped output) -> untyped

      def get_passwd: (untyped realm, untyped user, untyped reload_db) -> untyped

      def reload: () -> untyped

      def set_passwd: (untyped realm, untyped user, untyped pass) -> untyped

      private

      def initialize: (untyped path) -> void
    end

    class Htgroup
      public

      def add: (untyped group, untyped members) -> untyped

      def flush: (?untyped output) -> untyped

      def members: (untyped group) -> untyped

      def reload: () -> untyped

      private

      def initialize: (untyped path) -> void
    end

    class Htpasswd
      include WEBrick::HTTPAuth::UserDB

      public

      def delete_passwd: (untyped realm, untyped user) -> untyped

      def each: () { (untyped) -> untyped } -> untyped

      def flush: (?untyped output) -> untyped

      def get_passwd: (untyped realm, untyped user, untyped reload_db) -> untyped

      def reload: () -> untyped

      def set_passwd: (untyped realm, untyped user, untyped pass) -> untyped

      private

      def initialize: (untyped path, ?password_hash: untyped) -> void
    end

    module ProxyAuthenticator
      InfoField: String

      RequestField: String

      ResponseField: String
    end

    class ProxyBasicAuth < WEBrick::HTTPAuth::BasicAuth
      include WEBrick::HTTPAuth::ProxyAuthenticator
    end

    class ProxyDigestAuth < WEBrick::HTTPAuth::DigestAuth
      include WEBrick::HTTPAuth::ProxyAuthenticator

      private

      def check_uri: (untyped req, untyped auth_req) -> untyped
    end

    module UserDB
      public

      def auth_type: () -> untyped

      def auth_type=: (untyped) -> untyped

      def get_passwd: (untyped realm, untyped user, ?untyped reload_db) -> untyped

      def make_passwd: (untyped realm, untyped user, untyped pass) -> untyped

      def set_passwd: (untyped realm, untyped user, untyped pass) -> untyped
    end
  end

  class HTTPRequest
    public

    def []: (untyped header_name) -> untyped

    def accept: () -> untyped

    def accept_charset: () -> untyped

    def accept_encoding: () -> untyped

    def accept_language: () -> untyped

    def addr: () -> untyped

    def attributes: () -> untyped

    def body: () { (*untyped) -> untyped } -> untyped

    def body_reader: () -> untyped

    def content_length: () -> untyped

    def content_type: () -> untyped

    def continue: () -> untyped

    def cookies: () -> untyped

    def each: () { (untyped, untyped) -> untyped } -> untyped

    def fixup: () -> untyped

    def header: () -> untyped

    def host: () -> untyped

    def http_version: () -> untyped

    def keep_alive: () -> untyped

    def keep_alive?: () -> untyped

    def meta_vars: () -> untyped

    def parse: (?untyped socket) -> untyped

    def path: () -> untyped

    def path_info: () -> untyped

    def path_info=: (untyped) -> untyped

    def peeraddr: () -> untyped

    def port: () -> untyped

    def query: () -> untyped

    def query_string: () -> untyped

    def query_string=: (untyped) -> untyped

    def raw_header: () -> untyped

    def readpartial: (untyped size, ?untyped buf) -> untyped

    def remote_ip: () -> untyped

    def request_line: () -> untyped

    def request_method: () -> untyped

    def request_time: () -> untyped

    def request_uri: () -> untyped

    def script_name: () -> untyped

    def script_name=: (untyped) -> untyped

    def server_name: () -> untyped

    def ssl?: () -> untyped

    def to_s: () -> untyped

    def unparsed_uri: () -> untyped

    def user: () -> untyped

    def user=: (untyped) -> untyped

    private

    def _read_data: (untyped io, untyped method, *untyped arg) -> untyped

    def initialize: (untyped config) -> void

    def parse_host_request_line: (untyped host) -> untyped

    def parse_query: () -> untyped

    def parse_uri: (untyped str, ?untyped scheme) -> untyped

    def read_body: (untyped socket, untyped block) -> untyped

    def read_chunk_size: (untyped socket) -> untyped

    def read_chunked: (untyped socket, untyped block) -> untyped

    def read_data: (untyped io, untyped size) -> untyped

    def read_header: (untyped socket) -> untyped

    def read_line: (untyped io, ?untyped size) -> untyped

    def read_request_line: (untyped socket) -> untyped

    def setup_forwarded_info: () -> untyped

    BODY_CONTAINABLE_METHODS: Array[untyped]

    MAX_HEADER_LENGTH: Integer

    MAX_URI_LENGTH: Integer

    PrivateNetworkRegexp: Regexp
  end

  class HTTPResponse
    public

    def []: (untyped field) -> untyped

    def []=: (untyped field, untyped value) -> untyped

    def body: () -> untyped

    def body=: (untyped) -> untyped

    def chunked=: (untyped val) -> untyped

    def chunked?: () -> untyped

    def config: () -> untyped

    def content_length: () -> untyped

    def content_length=: (untyped len) -> untyped

    def content_type: () -> untyped

    def content_type=: (untyped type) -> untyped

    def cookies: () -> untyped

    def each: () { (untyped, untyped) -> untyped } -> untyped

    def filename: () -> untyped

    def filename=: (untyped) -> untyped

    def header: () -> untyped

    def http_version: () -> untyped

    def keep_alive: () -> untyped

    def keep_alive=: (untyped) -> untyped

    def keep_alive?: () -> untyped

    def make_body_tempfile: () -> untyped

    def reason_phrase: () -> untyped

    def reason_phrase=: (untyped) -> untyped

    def remove_body_tempfile: () -> untyped

    def request_http_version: () -> untyped

    def request_http_version=: (untyped) -> untyped

    def request_method: () -> untyped

    def request_method=: (untyped) -> untyped

    def request_uri: () -> untyped

    def request_uri=: (untyped) -> untyped

    def send_body: (untyped socket) -> untyped

    def send_header: (untyped socket) -> untyped

    def send_response: (untyped socket) -> untyped

    def sent_size: () -> untyped

    def set_error: (untyped ex, ?untyped backtrace) -> untyped

    def set_redirect: (untyped status, untyped url) -> untyped

    def setup_header: () -> untyped

    def status: () -> untyped

    def status=: (untyped status) -> untyped

    def status_line: () -> untyped

    def upgrade: () -> untyped

    def upgrade!: (untyped protocol) -> untyped

    def upgrade=: (untyped) -> untyped

    private

    def _write_data: (untyped socket, untyped data) -> untyped

    def check_header: (untyped header_value) -> untyped

    def error_body: (untyped backtrace, untyped ex, untyped host, untyped port) -> untyped

    def initialize: (untyped config) -> void

    def send_body_io: (untyped socket) -> untyped

    def send_body_proc: (untyped socket) -> untyped

    def send_body_string: (untyped socket) -> untyped

    class ChunkedWrapper
      public

      def <<: (*untyped buf) -> untyped

      def write: (untyped buf) -> untyped

      private

      def initialize: (untyped socket, untyped resp) -> void
    end

    class InvalidHeader < StandardError
    end
  end

  class HTTPServer < WEBrick::GenericServer
    public

    def access_log: (untyped config, untyped req, untyped res) -> untyped

    def create_request: (untyped with_webrick_config) -> untyped

    def create_response: (untyped with_webrick_config) -> untyped

    def do_OPTIONS: (untyped req, untyped res) -> untyped

    def lookup_server: (untyped req) -> untyped

    def mount: (untyped dir, untyped servlet, *untyped options) -> untyped

    def mount_proc: (untyped dir, ?untyped proc) { (*untyped) -> untyped } -> untyped

    def run: (untyped sock) -> untyped

    def search_servlet: (untyped path) -> untyped

    def service: (untyped req, untyped res) -> untyped

    alias umount unmount

    def unmount: (untyped dir) -> untyped

    def virtual_host: (untyped server) -> untyped

    private

    def initialize: (?untyped config, ?untyped default) -> void

    class MountTable
      public

      def []: (untyped dir) -> untyped

      def []=: (untyped dir, untyped val) -> untyped

      def delete: (untyped dir) -> untyped

      def scan: (untyped path) -> untyped

      private

      def compile: () -> untyped

      def initialize: () -> void

      def normalize: (untyped dir) -> untyped
    end
  end

  class HTTPServerError < WEBrick::ServerError
  end

  module HTTPServlet
    class AbstractServlet
      def self.get_instance: (untyped server, *untyped options) -> untyped

      public

      def do_GET: (untyped req, untyped res) -> untyped

      def do_HEAD: (untyped req, untyped res) -> untyped

      def do_OPTIONS: (untyped req, untyped res) -> untyped

      def service: (untyped req, untyped res) -> untyped

      private

      def initialize: (untyped server, *untyped options) -> void

      def redirect_to_directory_uri: (untyped req, untyped res) -> untyped
    end

    class CGIHandler < WEBrick::HTTPServlet::AbstractServlet
      public

      def do_GET: (untyped req, untyped res) -> untyped

      alias do_POST do_GET

      private

      def initialize: (untyped server, untyped name) -> void

      CGIRunner: String

      CGIRunnerArray: Array[untyped]

      Ruby: String
    end

    class DefaultFileHandler < WEBrick::HTTPServlet::AbstractServlet
      public

      def do_GET: (untyped req, untyped res) -> untyped

      def make_partial_content: (untyped req, untyped res, untyped filename, untyped filesize) -> untyped

      def multipart_body: (untyped body, untyped parts, untyped boundary, untyped mtype, untyped filesize) -> untyped

      def not_modified?: (untyped req, untyped res, untyped mtime, untyped etag) -> untyped

      def prepare_range: (untyped range, untyped filesize) -> untyped

      private

      def initialize: (untyped server, untyped local_path) -> void
    end

    class ERBHandler < WEBrick::HTTPServlet::AbstractServlet
      public

      def do_GET: (untyped req, untyped res) -> untyped

      alias do_POST do_GET

      private

      def evaluate: (untyped erb, untyped servlet_request, untyped servlet_response) -> untyped

      def initialize: (untyped server, untyped name) -> void
    end

    class FileHandler < WEBrick::HTTPServlet::AbstractServlet
      def self.add_handler: (untyped suffix, untyped handler) -> untyped

      def self.remove_handler: (untyped suffix) -> untyped

      public

      def do_GET: (untyped req, untyped res) -> untyped

      def do_OPTIONS: (untyped req, untyped res) -> untyped

      def do_POST: (untyped req, untyped res) -> untyped

      def service: (untyped req, untyped res) -> untyped

      def set_filesystem_encoding: (untyped str) -> untyped

      private

      def call_callback: (untyped callback_name, untyped req, untyped res) -> untyped

      def check_filename: (untyped req, untyped res, untyped name) -> untyped

      def exec_handler: (untyped req, untyped res) -> untyped

      def get_handler: (untyped req, untyped res) -> untyped

      def initialize: (untyped server, untyped root, ?untyped options, ?untyped default) -> void

      def nondisclosure_name?: (untyped name) -> untyped

      def prevent_directory_traversal: (untyped req, untyped res) -> untyped

      def search_file: (untyped req, untyped res, untyped basename) -> untyped

      def search_index_file: (untyped req, untyped res) -> untyped

      def set_dir_list: (untyped req, untyped res) -> untyped

      def set_filename: (untyped req, untyped res) -> untyped

      def shift_path_info: (untyped req, untyped res, untyped path_info, ?untyped base) -> untyped

      def trailing_pathsep?: (untyped path) -> untyped

      def windows_ambiguous_name?: (untyped name) -> untyped

      HandlerTable: Hash[untyped, untyped]
    end

    class HTTPServletError < StandardError
    end

    class ProcHandler < WEBrick::HTTPServlet::AbstractServlet
      public

      def do_GET: (untyped request, untyped response) -> untyped

      alias do_POST do_GET

      alias do_PUT do_GET

      def get_instance: (untyped server, *untyped options) -> untyped

      private

      def initialize: (untyped proc) -> void
    end
  end

  module HTTPStatus
    def self.[]: (untyped code) -> untyped

    def self.client_error?: (untyped code) -> untyped

    def self.error?: (untyped code) -> untyped

    def self.info?: (untyped code) -> untyped

    def self.reason_phrase: (untyped code) -> untyped

    def self.redirect?: (untyped code) -> untyped

    def self.server_error?: (untyped code) -> untyped

    def self.success?: (untyped code) -> untyped

    private

    def client_error?: (untyped code) -> untyped

    def error?: (untyped code) -> untyped

    def info?: (untyped code) -> untyped

    def reason_phrase: (untyped code) -> untyped

    def redirect?: (untyped code) -> untyped

    def server_error?: (untyped code) -> untyped

    def success?: (untyped code) -> untyped

    CodeToError: Hash[untyped, untyped]

    RC_ACCEPTED: Integer

    RC_BAD_GATEWAY: Integer

    RC_BAD_REQUEST: Integer

    RC_CONFLICT: Integer

    RC_CONTINUE: Integer

    RC_CREATED: Integer

    RC_EXPECTATION_FAILED: Integer

    RC_FAILED_DEPENDENCY: Integer

    RC_FORBIDDEN: Integer

    RC_FOUND: Integer

    RC_GATEWAY_TIMEOUT: Integer

    RC_GONE: Integer

    RC_HTTP_VERSION_NOT_SUPPORTED: Integer

    RC_INSUFFICIENT_STORAGE: Integer

    RC_INTERNAL_SERVER_ERROR: Integer

    RC_LENGTH_REQUIRED: Integer

    RC_LOCKED: Integer

    RC_METHOD_NOT_ALLOWED: Integer

    RC_MOVED_PERMANENTLY: Integer

    RC_MULTIPLE_CHOICES: Integer

    RC_MULTI_STATUS: Integer

    RC_NETWORK_AUTHENTICATION_REQUIRED: Integer

    RC_NON_AUTHORITATIVE_INFORMATION: Integer

    RC_NOT_ACCEPTABLE: Integer

    RC_NOT_FOUND: Integer

    RC_NOT_IMPLEMENTED: Integer

    RC_NOT_MODIFIED: Integer

    RC_NO_CONTENT: Integer

    RC_OK: Integer

    RC_PARTIAL_CONTENT: Integer

    RC_PAYMENT_REQUIRED: Integer

    RC_PRECONDITION_FAILED: Integer

    RC_PRECONDITION_REQUIRED: Integer

    RC_PROXY_AUTHENTICATION_REQUIRED: Integer

    RC_REQUEST_ENTITY_TOO_LARGE: Integer

    RC_REQUEST_HEADER_FIELDS_TOO_LARGE: Integer

    RC_REQUEST_RANGE_NOT_SATISFIABLE: Integer

    RC_REQUEST_TIMEOUT: Integer

    RC_REQUEST_URI_TOO_LARGE: Integer

    RC_RESET_CONTENT: Integer

    RC_SEE_OTHER: Integer

    RC_SERVICE_UNAVAILABLE: Integer

    RC_SWITCHING_PROTOCOLS: Integer

    RC_TEMPORARY_REDIRECT: Integer

    RC_TOO_MANY_REQUESTS: Integer

    RC_UNAUTHORIZED: Integer

    RC_UNAVAILABLE_FOR_LEGAL_REASONS: Integer

    RC_UNPROCESSABLE_ENTITY: Integer

    RC_UNSUPPORTED_MEDIA_TYPE: Integer

    RC_UPGRADE_REQUIRED: Integer

    RC_USE_PROXY: Integer

    StatusMessage: Hash[untyped, untyped]

    class Accepted < WEBrick::HTTPStatus::Success
    end

    class BadGateway < WEBrick::HTTPStatus::ServerError
    end

    class BadRequest < WEBrick::HTTPStatus::ClientError
    end

    class ClientError < WEBrick::HTTPStatus::Error
    end

    class Conflict < WEBrick::HTTPStatus::ClientError
    end

    class Continue < WEBrick::HTTPStatus::Info
    end

    class Created < WEBrick::HTTPStatus::Success
    end

    class EOFError < StandardError
    end

    class Error < WEBrick::HTTPStatus::Status
    end

    class ExpectationFailed < WEBrick::HTTPStatus::ClientError
    end

    class FailedDependency < WEBrick::HTTPStatus::ClientError
    end

    class Forbidden < WEBrick::HTTPStatus::ClientError
    end

    class Found < WEBrick::HTTPStatus::Redirect
    end

    class GatewayTimeout < WEBrick::HTTPStatus::ServerError
    end

    class Gone < WEBrick::HTTPStatus::ClientError
    end

    class HTTPVersionNotSupported < WEBrick::HTTPStatus::ServerError
    end

    class Info < WEBrick::HTTPStatus::Status
    end

    class InsufficientStorage < WEBrick::HTTPStatus::ServerError
    end

    class InternalServerError < WEBrick::HTTPStatus::ServerError
    end

    class LengthRequired < WEBrick::HTTPStatus::ClientError
    end

    class Locked < WEBrick::HTTPStatus::ClientError
    end

    class MethodNotAllowed < WEBrick::HTTPStatus::ClientError
    end

    class MovedPermanently < WEBrick::HTTPStatus::Redirect
    end

    class MultiStatus < WEBrick::HTTPStatus::Success
    end

    class MultipleChoices < WEBrick::HTTPStatus::Redirect
    end

    class NetworkAuthenticationRequired < WEBrick::HTTPStatus::ServerError
    end

    class NoContent < WEBrick::HTTPStatus::Success
    end

    class NonAuthoritativeInformation < WEBrick::HTTPStatus::Success
    end

    class NotAcceptable < WEBrick::HTTPStatus::ClientError
    end

    class NotFound < WEBrick::HTTPStatus::ClientError
    end

    class NotImplemented < WEBrick::HTTPStatus::ServerError
    end

    class NotModified < WEBrick::HTTPStatus::Redirect
    end

    class OK < WEBrick::HTTPStatus::Success
    end

    class PartialContent < WEBrick::HTTPStatus::Success
    end

    class PaymentRequired < WEBrick::HTTPStatus::ClientError
    end

    class PreconditionFailed < WEBrick::HTTPStatus::ClientError
    end

    class PreconditionRequired < WEBrick::HTTPStatus::ClientError
    end

    class ProxyAuthenticationRequired < WEBrick::HTTPStatus::ClientError
    end

    class Redirect < WEBrick::HTTPStatus::Status
    end

    class RequestEntityTooLarge < WEBrick::HTTPStatus::ClientError
    end

    class RequestHeaderFieldsTooLarge < WEBrick::HTTPStatus::ClientError
    end

    class RequestRangeNotSatisfiable < WEBrick::HTTPStatus::ClientError
    end

    class RequestTimeout < WEBrick::HTTPStatus::ClientError
    end

    class RequestURITooLarge < WEBrick::HTTPStatus::ClientError
    end

    class ResetContent < WEBrick::HTTPStatus::Success
    end

    class SeeOther < WEBrick::HTTPStatus::Redirect
    end

    class ServerError < WEBrick::HTTPStatus::Error
    end

    class ServiceUnavailable < WEBrick::HTTPStatus::ServerError
    end

    class Status < StandardError
      def self.code: () -> untyped

      def self.reason_phrase: () -> untyped

      public

      def code: () -> untyped

      def reason_phrase: () -> untyped

      alias to_i code
    end

    class Success < WEBrick::HTTPStatus::Status
    end

    class SwitchingProtocols < WEBrick::HTTPStatus::Info
    end

    class TemporaryRedirect < WEBrick::HTTPStatus::Redirect
    end

    class TooManyRequests < WEBrick::HTTPStatus::ClientError
    end

    class Unauthorized < WEBrick::HTTPStatus::ClientError
    end

    class UnavailableForLegalReasons < WEBrick::HTTPStatus::ClientError
    end

    class UnprocessableEntity < WEBrick::HTTPStatus::ClientError
    end

    class UnsupportedMediaType < WEBrick::HTTPStatus::ClientError
    end

    class UpgradeRequired < WEBrick::HTTPStatus::ClientError
    end

    class UseProxy < WEBrick::HTTPStatus::Redirect
    end
  end

  module HTTPUtils
    def self._escape: (untyped str, untyped regex) -> untyped

    def self._make_regex: (untyped str) -> untyped

    def self._make_regex!: (untyped str) -> untyped

    def self._unescape: (untyped str, untyped regex) -> untyped

    def self.dequote: (untyped str) -> untyped

    def self.escape: (untyped str) -> untyped

    def self.escape8bit: (untyped str) -> untyped

    def self.escape_form: (untyped str) -> untyped

    def self.escape_path: (untyped str) -> untyped

    def self.load_mime_types: (untyped file) -> untyped

    def self.mime_type: (untyped filename, untyped mime_tab) -> untyped

    def self.normalize_path: (untyped path) -> untyped

    def self.parse_form_data: (untyped io, untyped boundary) -> untyped

    def self.parse_header: (untyped raw) -> untyped

    def self.parse_query: (untyped str) -> untyped

    def self.parse_qvalues: (untyped value) -> untyped

    def self.parse_range_header: (untyped ranges_specifier) -> untyped

    def self.quote: (untyped str) -> untyped

    def self.split_header_value: (untyped str) -> untyped

    def self.unescape: (untyped str) -> untyped

    def self.unescape_form: (untyped str) -> untyped

    private

    def _escape: (untyped str, untyped regex) -> untyped

    def _make_regex: (untyped str) -> untyped

    def _make_regex!: (untyped str) -> untyped

    def _unescape: (untyped str, untyped regex) -> untyped

    def dequote: (untyped str) -> untyped

    def escape: (untyped str) -> untyped

    def escape8bit: (untyped str) -> untyped

    def escape_form: (untyped str) -> untyped

    def escape_path: (untyped str) -> untyped

    def load_mime_types: (untyped file) -> untyped

    def mime_type: (untyped filename, untyped mime_tab) -> untyped

    def normalize_path: (untyped path) -> untyped

    def parse_form_data: (untyped io, untyped boundary) -> untyped

    def parse_header: (untyped raw) -> untyped

    def parse_query: (untyped str) -> untyped

    def parse_qvalues: (untyped value) -> untyped

    def parse_range_header: (untyped ranges_specifier) -> untyped

    def quote: (untyped str) -> untyped

    def split_header_value: (untyped str) -> untyped

    def unescape: (untyped str) -> untyped

    def unescape_form: (untyped str) -> untyped

    DefaultMimeTypes: Hash[untyped, untyped]

    ESCAPED: Regexp

    NONASCII: Regexp

    UNESCAPED: Regexp

    UNESCAPED_FORM: Regexp

    UNESCAPED_PCHAR: Regexp

    class FormData < String
      public

      def <<: (untyped str) -> untyped

      def []: (*untyped key) -> untyped

      def append_data: (untyped data) -> untyped

      def each_data: () { (untyped) -> untyped } -> untyped

      def filename: () -> untyped

      def filename=: (untyped) -> untyped

      def list: () -> untyped

      def name: () -> untyped

      def name=: (untyped) -> untyped

      def next_data=: (untyped) -> untyped

      alias to_ary list

      def to_s: () -> untyped

      private

      def initialize: (*untyped args) -> void

      EmptyHeader: Hash[untyped, untyped]

      EmptyRawHeader: Array[untyped]
    end
  end

  class HTTPVersion
    include Comparable

    def self.convert: (untyped version) -> untyped

    public

    def <=>: (untyped other) -> untyped

    def major: () -> untyped

    def major=: (untyped) -> untyped

    def minor: () -> untyped

    def minor=: (untyped) -> untyped

    def to_s: () -> untyped

    private

    def initialize: (untyped version) -> void
  end

  class Log < WEBrick::BasicLog
    public

    def log: (untyped level, untyped data) -> untyped

    def time_format: () -> untyped

    def time_format=: (untyped) -> untyped

    private

    def initialize: (?untyped log_file, ?untyped level) -> void
  end

  class ServerError < StandardError
  end

  class SimpleServer
    def self.start: () { () -> untyped } -> untyped
  end

  module Utils
    def self.create_listeners: (untyped address, untyped port) -> untyped

    def self.getservername: () -> untyped

    def self.random_string: (untyped len) -> untyped

    def self.set_close_on_exec: (untyped io) -> untyped

    def self.set_non_blocking: (untyped io) -> untyped

    def self.su: (untyped user) -> untyped

    def self.timeout: (untyped seconds, ?untyped exception) { (untyped) -> untyped } -> untyped

    private

    def create_listeners: (untyped address, untyped port) -> untyped

    def getservername: () -> untyped

    def random_string: (untyped len) -> untyped

    def set_close_on_exec: (untyped io) -> untyped

    def set_non_blocking: (untyped io) -> untyped

    def su: (untyped user) -> untyped

    def timeout: (untyped seconds, ?untyped exception) { (untyped) -> untyped } -> untyped

    RAND_CHARS: String

    class TimeoutHandler
      include Singleton

      extend Singleton::SingletonClassMethods

      def self.cancel: (untyped id) -> untyped

      def self.register: (untyped seconds, untyped exception) -> untyped

      def self.terminate: () -> untyped

      public

      def cancel: (untyped thread, untyped id) -> untyped

      def interrupt: (untyped thread, untyped id, untyped exception) -> untyped

      def register: (untyped thread, untyped time, untyped exception) -> untyped

      def terminate: () -> untyped

      private

      def initialize: () -> void

      def watch: () -> untyped

      def watcher: () -> untyped

      TimeoutMutex: Thread::Mutex
    end
  end
end
