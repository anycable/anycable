module AnyCable
  interface _Config
    def presets: () -> Array[String]
    def presets=: (Array[String]) -> void
    def broadcast_adapter: () -> Symbol
    def broadcast_adapter=: (Symbol) -> void
    def secret: () -> String?
    def secret=: (String?) -> void
    def streams_secret: () -> String?
    def streams_secret=: (String?) -> void
    def broadcast_key: () -> String?
    def broadcast_key=: (String?) -> void
    def redis_url: () -> String
    def redis_url=: (String) -> void
    def redis_sentinels: () -> Array[String | Hash[untyped, untyped]]?
    def redis_sentinels=: (Array[String]) -> void
    def redis_channel: () -> String
    def redis_channel=: (String) -> void
    def redis_tls_verify: () -> bool
    def redis_tls_verify=: (bool) -> void
    def redis_tls_verify?: () -> bool
    def redis_tls_client_cert_path: () -> String?
    def redis_tls_client_cert_path=: (String) -> void
    def redis_tls_client_key_path: () -> String?
    def redis_tls_client_key_path=: (String) -> void
    def nats_servers: () -> Array[String]
    def nats_servers=: (Array[String]) -> void
    def nats_channel: () -> String
    def nats_channel=: (String) -> void
    def nats_dont_randomize_servers: () -> bool
    def nats_dont_randomize_servers=: (bool) -> void
    def nats_dont_randomize_servers?: () -> bool
    def nats_options: () -> Hash[untyped, untyped]
    def nats_options=: (Hash[untyped, untyped]) -> void
    def http_broadcast_url: () -> String
    def http_broadcast_url=: (String) -> void
    def http_broadcast_secret: () -> String?
    def http_broadcast_secret=: (String) -> void
    def log_file: () -> String?
    def log_file=: (String) -> void
    def log_level: () -> String
    def log_level=: (String) -> void
    def debug: () -> bool
    def debug=: (bool) -> void
    def debug?: () -> bool
    def http_health_port: () -> Integer?
    def http_health_port=: (Integer) -> void
    def http_health_path: () -> String
    def http_health_path=: (String) -> void
    def http_rpc_secret: () -> String?
    def http_rpc_secret=: (String?) -> void
    def version_check_enabled: () -> bool
    def version_check_enabled=: (bool) -> void
    def version_check_enabled?: () -> bool
    def sid_header_enabled: () -> bool
    def sid_header_enabled=: (bool) -> void
    def sid_header_enabled?: () -> bool
  end

  class Config < Anyway::Config
    BROADCAST_SECRET_PHRASE: String
    HTTP_RPC_SECRET_PHRASE: String

    def self.usage: (String txt) -> void
    def self.usages: () -> Array[String]

    include _Config

    alias debug? debug
    alias version_check_enabled? version_check_enabled

    def http_rpc_secret!: () -> String?
    def broadcast_key!: () -> String?

    def load: (*untyped) -> void
    def http_health_port_provided?: () -> bool
    def to_redis_params: () -> { url: String, sentinels: Array[untyped]?, ssl_params: Hash[Symbol, untyped]? }
    def to_http_health_params: () -> { port: Integer?, path: String }
    def to_nats_params: () -> Hash[Symbol, untyped]

    private

    def parse_sentinel: (untyped sentinel) -> Hash[Symbol, untyped]
    def load_presets: () -> void
    def detect_presets: () -> Array[String]
    def write_preset: (Symbol, untyped, preset: String) -> void
    def write_config_attr: (Symbol, untyped) -> void
    def __trace__: () -> untyped
    def infer_from_application_secret: (String) -> String?
  end
end
