module AnyCable
  module RPC
    interface _Handler
      def build_socket: (env: Env) -> Socket
      def build_env_response: (Socket socket) -> EnvResponse
      def logger: () -> Logger
      def factory: () -> ^(Socket, ?identifiers: String, ?subscriptions: Array[String]) -> _Connection
    end

    class Handler
      include _Handler
      include Handlers::Connect
      include Handlers::Disconnect
      include Handlers::Command

      def initialize: (?middleware: MiddlewareChain) -> void
      def handle: (Symbol cmd, rpcRequest data, ?rpcMetadata meta) -> rpcResponse

      private

      attr_reader middleware: MiddlewareChain
    end
  end
end
