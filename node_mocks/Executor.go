// Code generated by mockery v2.50.0. DO NOT EDIT.

package node_mocks

import (
	common "github.com/anycable/anycable-go/common"
	mock "github.com/stretchr/testify/mock"

	node "github.com/anycable/anycable-go/node"
)

// Executor is an autogenerated mock type for the Executor type
type Executor struct {
	mock.Mock
}

// Disconnect provides a mock function with given fields: _a0
func (_m *Executor) Disconnect(_a0 *node.Session) error {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for Disconnect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*node.Session) error); ok {
		r0 = rf(_a0)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// HandleCommand provides a mock function with given fields: _a0, _a1
func (_m *Executor) HandleCommand(_a0 *node.Session, _a1 *common.Message) error {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for HandleCommand")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*node.Session, *common.Message) error); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewExecutor creates a new instance of Executor. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewExecutor(t interface {
	mock.TestingT
	Cleanup(func())
}) *Executor {
	mock := &Executor{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
